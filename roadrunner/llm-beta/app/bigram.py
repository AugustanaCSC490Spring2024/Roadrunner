# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SS2TtvZarPTR6E_Yc_vvkZxaG8MAs9aO
"""
from datasets import load_dataset
import tiktoken
import torch
import torch.nn as nn
from torch.nn import functional as F
from .bigrammodel import BigramLanguageModel


dataset = load_dataset("biglam/gutenberg-poetry-corpus")


enc = tiktoken.get_encoding("cl100k_base")

# To get the tokeniser corresponding to a specific model in the OpenAI API:
enc = tiktoken.encoding_for_model("gpt-4")


#TO BE USED FOR CLOUD DEVELOPMENT
# encode = lambda s: [enc.encode(word) for word in s] # encoder: take a string, output a list of integers
# decode = lambda l: ''.join([enc.decode(l)]) # decoder: take a list of integers, output a string

encode = lambda s: [ord(char) for char in s if char.isalpha() or char.isspace()]
decode = lambda l: ''.join([chr(i) for i in l])

print(encode(["hii there"]))
print(decode(encode("hii there")))

num_rows = 10000
encode_gutenberg = lambda t: [word for x in range(num_rows+1) for sublist in encode(t['train'][slice(None, x, None)]['line']) for word in sublist]
    

def encode_gutenberg(data):
    res = []
    for sublist in data['train'][slice(None, num_rows, None)]['line']:
        res.extend(encode(sublist))
    return res


data = torch.tensor(encode_gutenberg(dataset), dtype=torch.long)
print(data.shape, data.dtype)


# Let's now split up the data into train and validation sets
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]

block_size = 8
train_data[:block_size+1]

x = train_data[:block_size]
y = train_data[1:block_size+1]
for t in range(block_size):
    context = x[:t+1]
    target = y[t]
    print(f"when input is {context} the target: {target}")

torch.manual_seed(1337)
batch_size = 4 # how many independent sequences will we process in parallel?
block_size = 8 # what is the maximum context length for predictions?

def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    return x, y




m = BigramLanguageModel(500)


# create a PyTorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr=1e-3)

batch_size = 32


for steps in range(50000): # increase number of steps for good results...

    # sample a batch of data
    xb, yb = get_batch('train')

    # evaluate the loss
    logits, loss = m(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

    print(loss.item())

print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))